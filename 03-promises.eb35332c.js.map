{"mappings":"AACMA,SAAGC,iBAAiB,oBAAoB,WAEvC,MAACC,EAAcF,SAASG,eAAe,eAGvC,SAAIC,EAAcC,EAAUC,GAE7B,OAAK,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KAEL,MAAEC,EAAeC,KAAKC,SACpBC,EAAS,C,SAAET,E,MAAUC,GAGvBK,EAAe,IAEbG,EAAGC,OAAS,WAChBP,EAAQM,KAGJA,EAAGC,OAAS,WAChBN,EAAOK,G,GAERR,EAAM,G,CAqBXJ,EAAUD,iBAAiB,UAAUe,eAAgBC,GACrDA,EAAEC,iBAGE,MAAEC,EAAcnB,SAASoB,cAAc,MAE1CD,EAAWE,GAAK,UAEhBnB,EAAWoB,YAAYH,GAGvB,MAAKI,EAAW,IAAIC,SAAStB,GAMxBuB,EAjCPT,gBAAgCU,EAAQC,EAAYC,GACnD,IAAK,IAAIC,EAAI,EAAGA,GAAKH,EAAQG,IAAK,CAChC,MAAMvB,EAAQqB,GAAcE,EAAI,GAAKD,EACrC,IAEI,MAAId,QAAeV,EAAcyB,EAAGvB,SAEhCQ,C,CACN,MAAOgB,SAEDA,C,GAuBQC,CALHC,SAAST,EAASU,IAAI,WAClBD,SAAST,EAASU,IAAI,UAC5BD,SAAST,EAASU,IAAI,UAMhC,UAAQ,MAAMnB,KAAUW,EAAW,CACpC,MAAMS,EAAKlC,SAASoB,cAAc,MACZ,aAAlBN,EAAOC,QAELmB,EAADC,YAAc,WAAWrB,EAAOT,2BAA2BS,EAAOR,WACrE4B,EAAGE,MAAMC,MAAQ,UAGZH,EAAFC,YAAc,WAAWrB,EAAOT,2BAA2BS,EAAOR,WACrE4B,EAAGE,MAAMC,MAAQ,OAGnBlB,EAAYG,YAAYY,E","sources":["src/js/03-promises.js"],"sourcesContent":["// Așteaptă ca documentul HTML să fie complet încărcat înainte de a executa codul\ndocument.addEventListener('DOMContentLoaded', function () {\n  // Selectează formularul cu id-ul 'promiseForm' și îl stochează în variabila 'promiseForm'\n  const promiseForm = document.getElementById('promiseForm');\n\n  // Definește o funcție numită 'createPromise' care primește 'position' și 'delay'\n  function createPromise(position, delay) {\n    // Returnează o promisiune care se va rezolva sau respinge după un anumit timp 'delay'\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Generează un număr aleator între 0 și 1\n        const randomNumber = Math.random();\n        const result = { position, delay };\n\n        // Verifică dacă numărul generat este mai mic de 0.7 (70% probabilitate)\n        if (randomNumber < 0.7) {\n          // Dacă da, marchează promisiunea ca rezolvată și trimite rezultatul\n          result.status = 'resolved';\n          resolve(result);\n        } else {\n          // Dacă nu, marchează promisiunea ca respinsă și trimite rezultatul\n          result.status = 'rejected';\n          reject(result);\n        }\n      }, delay);\n    });\n  }\n\n  // Definește un generator de promisiuni numit 'promiseGenerator'\n  async function* promiseGenerator(amount, firstDelay, step) {\n    for (let i = 1; i <= amount; i++) {\n      const delay = firstDelay + (i - 1) * step;\n      try {\n        // Așteaptă rezolvarea sau respingerea unei promisiuni create cu 'createPromise'\n        const result = await createPromise(i, delay);\n        // Returnează rezultatul pentru generator\n        yield result;\n      } catch (error) {\n        // Dacă promisiunea este respinsă, returnează eroarea pentru generator\n        yield error;\n      }\n    }\n  }\n\n  // Adaugă un ascultător de eveniment pentru trimiterea formularului\n  promiseForm.addEventListener('submit', async function (e) {\n    e.preventDefault(); // Oprirea comportamentului implicit al formularului (trimiterea)\n\n    // Creează o listă neordonată pentru afișarea rezultatelor\n    const resultsList = document.createElement('ul');\n    // Setează id-ul listei ca 'results'\n    resultsList.id = 'results';\n    // Adaugă lista la interiorul formularului\n    promiseForm.appendChild(resultsList);\n\n    // Obține datele din formular folosind FormData\n    const formData = new FormData(promiseForm);\n    const amount = parseInt(formData.get('amount'));\n    const firstDelay = parseInt(formData.get('delay'));\n    const step = parseInt(formData.get('step'));\n\n    // Creează un generator de promisiuni pe baza datelor din formular\n    const generator = promiseGenerator(amount, firstDelay, step);\n\n    // Parcurge generatorul și afișează rezultatele\n    for await (const result of generator) {\n      const li = document.createElement('li');\n      if (result.status === 'resolved') {\n        // Dacă promisiunea este rezolvată, afișează mesajul cu verde\n        li.textContent = `Promise ${result.position} resolved after ${result.delay} ms`;\n        li.style.color = 'green';\n      } else {\n        // Dacă promisiunea este respinsă, afișează mesajul cu roșu\n        li.textContent = `Promise ${result.position} rejected after ${result.delay} ms`;\n        li.style.color = 'red';\n      }\n      // Adaugă elementul <li> la lista de rezultate\n      resultsList.appendChild(li);\n    }\n  });\n});\n"],"names":["document","addEventListener","promiseForm","getElementById","createPromise","position","delay","Promise","resolve","reject","setTimeout","randomNumber","Math","random","result","status","async","e","preventDefault","resultsList","createElement","id","appendChild","formData","FormData","generator","amount","firstDelay","step","i","error","promiseGenerator","parseInt","get","li","textContent","style","color"],"version":3,"file":"03-promises.eb35332c.js.map"}