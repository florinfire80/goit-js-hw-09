{"mappings":"qhBACA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAeC,KAAKC,SACpBC,EAAS,C,SAAER,E,MAAUC,GAE3BQ,YAAW,KACLJ,EAAe,IAEjBG,EAAOE,OAAS,WAChBP,EAAQK,KAERA,EAAOE,OAAS,WAChBN,EAAOI,G,GAERP,EAAM,G,CAIbU,SAASC,iBAAiB,oBAAoB,WAC5C,MAAMC,EAAcF,SAASG,eAAe,eAE5CD,EAAYD,iBAAiB,UAAUG,eAAgBC,GACrDA,EAAEC,iBAEF,MAAMC,EAAW,IAAIC,SAASN,GACxBO,EAAaC,SAASH,EAASI,IAAI,UACnCC,EAAOF,SAASH,EAASI,IAAI,SAC7BE,EAASH,SAASH,EAASI,IAAI,WAE/BG,EAAW,GAEjB,IAAK,IAAIC,EAAI,EAAGA,GAAKF,EAAQE,IAAK,CAChC,MAAMzB,EAAQmB,GAAcM,EAAI,GAAKH,EACrCE,EAASE,KAAK5B,EAAc2B,EAAGzB,G,CAGjC,WACwBC,QAAQ0B,IAAIH,IAC1BI,SAAQrB,IACQ,aAAlBA,EAAOE,OACToB,EAAAjC,GAASkC,OAAOC,QACd,WAAWxB,EAAOR,2BAA2BQ,EAAOP,YAGtD6B,EAAAjC,GAASkC,OAAOE,QACd,WAAWzB,EAAOR,2BAA2BQ,EAAOP,WACrD,G,CAGL,MAAOiC,GACPC,QAAQD,MAAMA,E","sources":["src/js/03-promises.js"],"sourcesContent":["\nimport Notiflix from 'notiflix';\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const randomNumber = Math.random(); // Generăm un număr între 0 și 1\n    const result = { position, delay };\n\n    setTimeout(() => {\n      if (randomNumber < 0.3) {\n        // Alegeți o probabilitate de 30% pentru respingere\n        result.status = 'resolved';\n        resolve(result);\n      } else {\n        result.status = 'rejected';\n        reject(result);\n      }\n    }, delay);\n  });\n}\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  const promiseForm = document.getElementById('promiseForm');\n\n  promiseForm.addEventListener('submit', async function (e) {\n    e.preventDefault();\n\n    const formData = new FormData(promiseForm);\n    const firstDelay = parseInt(formData.get('delay'));\n    const step = parseInt(formData.get('step'));\n    const amount = parseInt(formData.get('amount'));\n\n    const promises = [];\n\n    for (let i = 1; i <= amount; i++) {\n      const delay = firstDelay + (i - 1) * step;\n      promises.push(createPromise(i, delay));\n    }\n\n    try {\n      const results = await Promise.all(promises);\n      results.forEach(result => {\n        if (result.status === 'resolved') {\n          Notiflix.Notify.Success(\n            `Promise ${result.position} resolved after ${result.delay} ms`\n          );\n        } else {\n          Notiflix.Notify.Failure(\n            `Promise ${result.position} rejected after ${result.delay} ms`\n          );\n        }\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  });\n});\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","randomNumber","Math","random","result","setTimeout","status","document","addEventListener","promiseForm","getElementById","async","e","preventDefault","formData","FormData","firstDelay","parseInt","get","step","amount","promises","i","push","all","forEach","$parcel$interopDefault","Notify","Success","Failure","error","console"],"version":3,"file":"03-promises.ac9b1418.js.map"}